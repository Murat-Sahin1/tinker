{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "34JUvZyQbkcr"
   },
   "source": [
    "# Installing the Tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "W-UN3nPzbdTX",
    "outputId": "70d568f4-16e3-4176-fb77-c52081c4c02a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.9.2\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "f7GLWygrbtlO"
   },
   "source": [
    "# Other Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "cO5vmWlcbwee"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XeclG8B_b45H"
   },
   "source": [
    "# Getting the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3Xdjj_LtcuYB",
    "outputId": "01bf77c7-2388-42af-9e41-8999450c9c50"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2022-12-08 15:02:11--  https://raw.githubusercontent.com/lazyprogrammer/machine_learning_examples/master/tf2.0/moore.csv\n",
      "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
      "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 2302 (2.2K) [text/plain]\n",
      "Saving to: ‘moore.csv’\n",
      "\n",
      "moore.csv           100%[===================>]   2.25K  --.-KB/s    in 0s      \n",
      "\n",
      "2022-12-08 15:02:11 (33.0 MB/s) - ‘moore.csv’ saved [2302/2302]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://raw.githubusercontent.com/lazyprogrammer/machine_learning_examples/master/tf2.0/moore.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fa-CfWQxc0ft"
   },
   "source": [
    "# Loading the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8CT848nKcz2l",
    "outputId": "3c0ac5de-e49c-4195-d9e5-47d8803c8f99"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1971]\n",
      " [1972]\n",
      " [1973]\n",
      " [1973]\n",
      " [1974]\n",
      " [1974]\n",
      " [1974]\n",
      " [1975]\n",
      " [1976]\n",
      " [1976]\n",
      " [1976]\n",
      " [1978]\n",
      " [1978]\n",
      " [1979]\n",
      " [1979]\n",
      " [1979]\n",
      " [1981]\n",
      " [1982]\n",
      " [1982]\n",
      " [1983]\n",
      " [1984]\n",
      " [1984]\n",
      " [1985]\n",
      " [1985]\n",
      " [1985]\n",
      " [1986]\n",
      " [1986]\n",
      " [1986]\n",
      " [1987]\n",
      " [1987]\n",
      " [1987]\n",
      " [1987]\n",
      " [1988]\n",
      " [1988]\n",
      " [1989]\n",
      " [1989]\n",
      " [1989]\n",
      " [1989]\n",
      " [1990]\n",
      " [1991]\n",
      " [1991]\n",
      " [1992]\n",
      " [1992]\n",
      " [1993]\n",
      " [1993]\n",
      " [1994]\n",
      " [1994]\n",
      " [1995]\n",
      " [1999]\n",
      " [1995]\n",
      " [1996]\n",
      " [1997]\n",
      " [1997]\n",
      " [1997]\n",
      " [1998]\n",
      " [1999]\n",
      " [1999]\n",
      " [2000]\n",
      " [2000]\n",
      " [1999]\n",
      " [1999]\n",
      " [1999]\n",
      " [2000]\n",
      " [2001]\n",
      " [2001]\n",
      " [2002]\n",
      " [2004]\n",
      " [2004]\n",
      " [2005]\n",
      " [2006]\n",
      " [2005]\n",
      " [2006]\n",
      " [2007]\n",
      " [2008]\n",
      " [2003]\n",
      " [2003]\n",
      " [2002]\n",
      " [2005]\n",
      " [2005]\n",
      " [2006]\n",
      " [2007]\n",
      " [2003]\n",
      " [2008]\n",
      " [2009]\n",
      " [2011]\n",
      " [2012]\n",
      " [2007]\n",
      " [2007]\n",
      " [2008]\n",
      " [2004]\n",
      " [2007]\n",
      " [2008]\n",
      " [2008]\n",
      " [2007]\n",
      " [2009]\n",
      " [2010]\n",
      " [2012]\n",
      " [2013]\n",
      " [2011]\n",
      " [2010]\n",
      " [2010]\n",
      " [2012]\n",
      " [2012]\n",
      " [2010]\n",
      " [2012]\n",
      " [2014]\n",
      " [2006]\n",
      " [2015]\n",
      " [2013]\n",
      " [2015]\n",
      " [2008]\n",
      " [2010]\n",
      " [2014]\n",
      " [2015]\n",
      " [2015]\n",
      " [2012]\n",
      " [2011]\n",
      " [2010]\n",
      " [2014]\n",
      " [2011]\n",
      " [2012]\n",
      " [2014]\n",
      " [2016]\n",
      " [2017]\n",
      " [2017]\n",
      " [2018]\n",
      " [2012]\n",
      " [2016]\n",
      " [2016]\n",
      " [2015]\n",
      " [2013]\n",
      " [2017]\n",
      " [2014]\n",
      " [2017]\n",
      " [2017]\n",
      " [2017]\n",
      " [2012]\n",
      " [2013]\n",
      " [2014]\n",
      " [2017]\n",
      " [2018]\n",
      " [2016]\n",
      " [2018]\n",
      " [2017]\n",
      " [2018]\n",
      " [2017]\n",
      " [2015]\n",
      " [2017]\n",
      " [2016]\n",
      " [2017]\n",
      " [2016]\n",
      " [2017]\n",
      " [2017]\n",
      " [2015]\n",
      " [2017]\n",
      " [2018]\n",
      " [2017]\n",
      " [2017]\n",
      " [2017]\n",
      " [2018]\n",
      " [2018]\n",
      " [2018]]\n",
      "[       2300        3500        2500        2500        4100        4500\n",
      "        8000        3510        5000        8500        6500        9000\n",
      "       29000       17500       29000       68000       11500       55000\n",
      "      134000       22000       63000      190000      275000       25000\n",
      "       16000      110000      375000       30000      385000      730000\n",
      "      273000      553000      180000      250000      600000     1000000\n",
      "     1180235      310000     1200000     1350000       35000      600000\n",
      "      900000     2800000     3100000      578977     2500000     2500000\n",
      "      111000     5500000     4300000    10000000     7500000     8800000\n",
      "     7500000     9500000    13500000    21000000    21000000    27400000\n",
      "    21300000    22000000    42000000   191000000    45000000    55000000\n",
      "   112000000   400000000   169000000   184000000   228000000   362000000\n",
      "   540000000    47000000    54300000   105900000   220000000   165000000\n",
      "   250000000   291000000   169000000   410000000   600000000   760000000\n",
      "  1870000000   432000000   463000000    26000000   230000000   592000000\n",
      "   411000000   731000000   758000000   789000000   904000000  1000000000\n",
      "  2990000000  1000000000  1160000000  1170000000  1200000000  1200000000\n",
      "  1303000000  1400000000  1400000000  1400000000  1700000000  1750000000\n",
      "  1860000000  1900000000  1900000000  2000000000  2000000000  2000000000\n",
      "  3000000000  2100000000  2270000000  2300000000  2600000000  2600000000\n",
      "  2750000000  3000000000  3000000000  5300000000  5300000000  8500000000\n",
      "  3100000000  3200000000  3300000000  3990000000  4200000000  4300000000\n",
      "  4310000000  4800000000  4800000000  4800000000  5000000000  5000000000\n",
      "  5560000000  6100000000  6900000000  4000000000  6900000000  5500000000\n",
      "  5500000000  7000000000  7100000000  8000000000  7200000000  8000000000\n",
      "  8000000000  9700000000   250000000 10000000000  5450000000 10000000000\n",
      "  4300000000 18000000000 19200000000  8876000000 23600000000  9000000000]\n"
     ]
    }
   ],
   "source": [
    "data = pd.read_csv('moore.csv', header=None).values\n",
    "X = data[:,0:1]\n",
    "Y = data[:, -1]\n",
    "print(X)\n",
    "print(Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "y2oweb5Vfuwr"
   },
   "source": [
    "# Viewing the shape of X and Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HOu3Mt5Sfx7V",
    "outputId": "1e78ac0f-3e89-486f-dc8e-e0413a091e01"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(162, 1)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8hzU4a9sdtGF"
   },
   "source": [
    "# Plotting the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 293
    },
    "id": "9DSOQ_7ddwNH",
    "outputId": "6e074d53-b522-43b5-fe6b-d97e0d2413bf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f6ead490f10>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X, Y)\n",
    "# Notice how it is exponantial, we should take its log to make it linear"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "h2sQZ7End-KH"
   },
   "source": [
    "# Taking log of the exponantial Y, in order to make it linear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "id": "UBRvKBxAeNak",
    "outputId": "5ecaca01-bdb3-4895-f529-ee4a3513403b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f6ea31dff70>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Y = np.log(Y)\n",
    "plt.scatter(X,Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gMjS1fqEetE2"
   },
   "source": [
    "# Centering the X data, so the values are not too large"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-fgn6fqpexq1",
    "outputId": "fa7ed40e-9f63-4f0f-b75c-3dfa00a2680b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1971]\n",
      " [1972]\n",
      " [1973]\n",
      " [1973]\n",
      " [1974]\n",
      " [1974]\n",
      " [1974]\n",
      " [1975]\n",
      " [1976]\n",
      " [1976]\n",
      " [1976]\n",
      " [1978]\n",
      " [1978]\n",
      " [1979]\n",
      " [1979]\n",
      " [1979]\n",
      " [1981]\n",
      " [1982]\n",
      " [1982]\n",
      " [1983]\n",
      " [1984]\n",
      " [1984]\n",
      " [1985]\n",
      " [1985]\n",
      " [1985]\n",
      " [1986]\n",
      " [1986]\n",
      " [1986]\n",
      " [1987]\n",
      " [1987]\n",
      " [1987]\n",
      " [1987]\n",
      " [1988]\n",
      " [1988]\n",
      " [1989]\n",
      " [1989]\n",
      " [1989]\n",
      " [1989]\n",
      " [1990]\n",
      " [1991]\n",
      " [1991]\n",
      " [1992]\n",
      " [1992]\n",
      " [1993]\n",
      " [1993]\n",
      " [1994]\n",
      " [1994]\n",
      " [1995]\n",
      " [1999]\n",
      " [1995]\n",
      " [1996]\n",
      " [1997]\n",
      " [1997]\n",
      " [1997]\n",
      " [1998]\n",
      " [1999]\n",
      " [1999]\n",
      " [2000]\n",
      " [2000]\n",
      " [1999]\n",
      " [1999]\n",
      " [1999]\n",
      " [2000]\n",
      " [2001]\n",
      " [2001]\n",
      " [2002]\n",
      " [2004]\n",
      " [2004]\n",
      " [2005]\n",
      " [2006]\n",
      " [2005]\n",
      " [2006]\n",
      " [2007]\n",
      " [2008]\n",
      " [2003]\n",
      " [2003]\n",
      " [2002]\n",
      " [2005]\n",
      " [2005]\n",
      " [2006]\n",
      " [2007]\n",
      " [2003]\n",
      " [2008]\n",
      " [2009]\n",
      " [2011]\n",
      " [2012]\n",
      " [2007]\n",
      " [2007]\n",
      " [2008]\n",
      " [2004]\n",
      " [2007]\n",
      " [2008]\n",
      " [2008]\n",
      " [2007]\n",
      " [2009]\n",
      " [2010]\n",
      " [2012]\n",
      " [2013]\n",
      " [2011]\n",
      " [2010]\n",
      " [2010]\n",
      " [2012]\n",
      " [2012]\n",
      " [2010]\n",
      " [2012]\n",
      " [2014]\n",
      " [2006]\n",
      " [2015]\n",
      " [2013]\n",
      " [2015]\n",
      " [2008]\n",
      " [2010]\n",
      " [2014]\n",
      " [2015]\n",
      " [2015]\n",
      " [2012]\n",
      " [2011]\n",
      " [2010]\n",
      " [2014]\n",
      " [2011]\n",
      " [2012]\n",
      " [2014]\n",
      " [2016]\n",
      " [2017]\n",
      " [2017]\n",
      " [2018]\n",
      " [2012]\n",
      " [2016]\n",
      " [2016]\n",
      " [2015]\n",
      " [2013]\n",
      " [2017]\n",
      " [2014]\n",
      " [2017]\n",
      " [2017]\n",
      " [2017]\n",
      " [2012]\n",
      " [2013]\n",
      " [2014]\n",
      " [2017]\n",
      " [2018]\n",
      " [2016]\n",
      " [2018]\n",
      " [2017]\n",
      " [2018]\n",
      " [2017]\n",
      " [2015]\n",
      " [2017]\n",
      " [2016]\n",
      " [2017]\n",
      " [2016]\n",
      " [2017]\n",
      " [2017]\n",
      " [2015]\n",
      " [2017]\n",
      " [2018]\n",
      " [2017]\n",
      " [2017]\n",
      " [2017]\n",
      " [2018]\n",
      " [2018]\n",
      " [2018]]\n",
      "[[-31.19753086]\n",
      " [-30.19753086]\n",
      " [-29.19753086]\n",
      " [-29.19753086]\n",
      " [-28.19753086]\n",
      " [-28.19753086]\n",
      " [-28.19753086]\n",
      " [-27.19753086]\n",
      " [-26.19753086]\n",
      " [-26.19753086]\n",
      " [-26.19753086]\n",
      " [-24.19753086]\n",
      " [-24.19753086]\n",
      " [-23.19753086]\n",
      " [-23.19753086]\n",
      " [-23.19753086]\n",
      " [-21.19753086]\n",
      " [-20.19753086]\n",
      " [-20.19753086]\n",
      " [-19.19753086]\n",
      " [-18.19753086]\n",
      " [-18.19753086]\n",
      " [-17.19753086]\n",
      " [-17.19753086]\n",
      " [-17.19753086]\n",
      " [-16.19753086]\n",
      " [-16.19753086]\n",
      " [-16.19753086]\n",
      " [-15.19753086]\n",
      " [-15.19753086]\n",
      " [-15.19753086]\n",
      " [-15.19753086]\n",
      " [-14.19753086]\n",
      " [-14.19753086]\n",
      " [-13.19753086]\n",
      " [-13.19753086]\n",
      " [-13.19753086]\n",
      " [-13.19753086]\n",
      " [-12.19753086]\n",
      " [-11.19753086]\n",
      " [-11.19753086]\n",
      " [-10.19753086]\n",
      " [-10.19753086]\n",
      " [ -9.19753086]\n",
      " [ -9.19753086]\n",
      " [ -8.19753086]\n",
      " [ -8.19753086]\n",
      " [ -7.19753086]\n",
      " [ -3.19753086]\n",
      " [ -7.19753086]\n",
      " [ -6.19753086]\n",
      " [ -5.19753086]\n",
      " [ -5.19753086]\n",
      " [ -5.19753086]\n",
      " [ -4.19753086]\n",
      " [ -3.19753086]\n",
      " [ -3.19753086]\n",
      " [ -2.19753086]\n",
      " [ -2.19753086]\n",
      " [ -3.19753086]\n",
      " [ -3.19753086]\n",
      " [ -3.19753086]\n",
      " [ -2.19753086]\n",
      " [ -1.19753086]\n",
      " [ -1.19753086]\n",
      " [ -0.19753086]\n",
      " [  1.80246914]\n",
      " [  1.80246914]\n",
      " [  2.80246914]\n",
      " [  3.80246914]\n",
      " [  2.80246914]\n",
      " [  3.80246914]\n",
      " [  4.80246914]\n",
      " [  5.80246914]\n",
      " [  0.80246914]\n",
      " [  0.80246914]\n",
      " [ -0.19753086]\n",
      " [  2.80246914]\n",
      " [  2.80246914]\n",
      " [  3.80246914]\n",
      " [  4.80246914]\n",
      " [  0.80246914]\n",
      " [  5.80246914]\n",
      " [  6.80246914]\n",
      " [  8.80246914]\n",
      " [  9.80246914]\n",
      " [  4.80246914]\n",
      " [  4.80246914]\n",
      " [  5.80246914]\n",
      " [  1.80246914]\n",
      " [  4.80246914]\n",
      " [  5.80246914]\n",
      " [  5.80246914]\n",
      " [  4.80246914]\n",
      " [  6.80246914]\n",
      " [  7.80246914]\n",
      " [  9.80246914]\n",
      " [ 10.80246914]\n",
      " [  8.80246914]\n",
      " [  7.80246914]\n",
      " [  7.80246914]\n",
      " [  9.80246914]\n",
      " [  9.80246914]\n",
      " [  7.80246914]\n",
      " [  9.80246914]\n",
      " [ 11.80246914]\n",
      " [  3.80246914]\n",
      " [ 12.80246914]\n",
      " [ 10.80246914]\n",
      " [ 12.80246914]\n",
      " [  5.80246914]\n",
      " [  7.80246914]\n",
      " [ 11.80246914]\n",
      " [ 12.80246914]\n",
      " [ 12.80246914]\n",
      " [  9.80246914]\n",
      " [  8.80246914]\n",
      " [  7.80246914]\n",
      " [ 11.80246914]\n",
      " [  8.80246914]\n",
      " [  9.80246914]\n",
      " [ 11.80246914]\n",
      " [ 13.80246914]\n",
      " [ 14.80246914]\n",
      " [ 14.80246914]\n",
      " [ 15.80246914]\n",
      " [  9.80246914]\n",
      " [ 13.80246914]\n",
      " [ 13.80246914]\n",
      " [ 12.80246914]\n",
      " [ 10.80246914]\n",
      " [ 14.80246914]\n",
      " [ 11.80246914]\n",
      " [ 14.80246914]\n",
      " [ 14.80246914]\n",
      " [ 14.80246914]\n",
      " [  9.80246914]\n",
      " [ 10.80246914]\n",
      " [ 11.80246914]\n",
      " [ 14.80246914]\n",
      " [ 15.80246914]\n",
      " [ 13.80246914]\n",
      " [ 15.80246914]\n",
      " [ 14.80246914]\n",
      " [ 15.80246914]\n",
      " [ 14.80246914]\n",
      " [ 12.80246914]\n",
      " [ 14.80246914]\n",
      " [ 13.80246914]\n",
      " [ 14.80246914]\n",
      " [ 13.80246914]\n",
      " [ 14.80246914]\n",
      " [ 14.80246914]\n",
      " [ 12.80246914]\n",
      " [ 14.80246914]\n",
      " [ 15.80246914]\n",
      " [ 14.80246914]\n",
      " [ 14.80246914]\n",
      " [ 14.80246914]\n",
      " [ 15.80246914]\n",
      " [ 15.80246914]\n",
      " [ 15.80246914]]\n"
     ]
    }
   ],
   "source": [
    "print(X)\n",
    "X = X - X.mean()\n",
    "print(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "sY1wQCmnfPjm"
   },
   "source": [
    "# Creating the Tensorflow model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "fyqPxSsFfS97"
   },
   "outputs": [],
   "source": [
    "model = tf.keras.models.Sequential([\n",
    "    tf.keras.layers.Input(shape=(1,)), # Specifying input X format here, dimension size of X\n",
    "    tf.keras.layers.Dense(1)\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "A_MefF8XgwkO"
   },
   "source": [
    "# Compiling the Tensorflow model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "bsdObOQtg087"
   },
   "outputs": [],
   "source": [
    "model.compile(optimizer=tf.keras.optimizers.SGD(0.001, 0.9), loss='mse')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qTG2EXkRhTtV"
   },
   "source": [
    "# Learning rate scheduler for our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qsOvVeXjhWUu"
   },
   "outputs": [],
   "source": [
    "def schedule(epoch, lr):\n",
    "  if epoch >= 50:\n",
    "    return 0.0001\n",
    "  return 0.001\n",
    "\n",
    "scheduler = tf.keras.callbacks.LearningRateScheduler(schedule)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oD1cExdmh3gs"
   },
   "source": [
    "# Training our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kj2Tus3gh9t8",
    "outputId": "9119864c-37d8-4459-8231-91ff592a61a7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 123/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9236 - lr: 1.0000e-04\n",
      "Epoch 124/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8973 - lr: 1.0000e-04\n",
      "Epoch 125/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9218 - lr: 1.0000e-04\n",
      "Epoch 126/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8855 - lr: 1.0000e-04\n",
      "Epoch 127/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8734 - lr: 1.0000e-04\n",
      "Epoch 128/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8736 - lr: 1.0000e-04\n",
      "Epoch 129/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8707 - lr: 1.0000e-04\n",
      "Epoch 130/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8744 - lr: 1.0000e-04\n",
      "Epoch 131/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8702 - lr: 1.0000e-04\n",
      "Epoch 132/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8768 - lr: 1.0000e-04\n",
      "Epoch 133/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8793 - lr: 1.0000e-04\n",
      "Epoch 134/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8783 - lr: 1.0000e-04\n",
      "Epoch 135/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8846 - lr: 1.0000e-04\n",
      "Epoch 136/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8761 - lr: 1.0000e-04\n",
      "Epoch 137/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8707 - lr: 1.0000e-04\n",
      "Epoch 138/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8762 - lr: 1.0000e-04\n",
      "Epoch 139/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8711 - lr: 1.0000e-04\n",
      "Epoch 140/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8748 - lr: 1.0000e-04\n",
      "Epoch 141/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8735 - lr: 1.0000e-04\n",
      "Epoch 142/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8734 - lr: 1.0000e-04\n",
      "Epoch 143/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8909 - lr: 1.0000e-04\n",
      "Epoch 144/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8774 - lr: 1.0000e-04\n",
      "Epoch 145/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8763 - lr: 1.0000e-04\n",
      "Epoch 146/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8726 - lr: 1.0000e-04\n",
      "Epoch 147/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8914 - lr: 1.0000e-04\n",
      "Epoch 148/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9045 - lr: 1.0000e-04\n",
      "Epoch 149/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8692 - lr: 1.0000e-04\n",
      "Epoch 150/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8964 - lr: 1.0000e-04\n",
      "Epoch 151/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8893 - lr: 1.0000e-04\n",
      "Epoch 152/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8693 - lr: 1.0000e-04\n",
      "Epoch 153/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8789 - lr: 1.0000e-04\n",
      "Epoch 154/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8692 - lr: 1.0000e-04\n",
      "Epoch 155/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.9084 - lr: 1.0000e-04\n",
      "Epoch 156/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9125 - lr: 1.0000e-04\n",
      "Epoch 157/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8773 - lr: 1.0000e-04\n",
      "Epoch 158/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8715 - lr: 1.0000e-04\n",
      "Epoch 159/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8735 - lr: 1.0000e-04\n",
      "Epoch 160/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8731 - lr: 1.0000e-04\n",
      "Epoch 161/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8718 - lr: 1.0000e-04\n",
      "Epoch 162/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8710 - lr: 1.0000e-04\n",
      "Epoch 163/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8756 - lr: 1.0000e-04\n",
      "Epoch 164/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8683 - lr: 1.0000e-04\n",
      "Epoch 165/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8883 - lr: 1.0000e-04\n",
      "Epoch 166/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9417 - lr: 1.0000e-04\n",
      "Epoch 167/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9127 - lr: 1.0000e-04\n",
      "Epoch 168/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8689 - lr: 1.0000e-04\n",
      "Epoch 169/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9085 - lr: 1.0000e-04\n",
      "Epoch 170/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8949 - lr: 1.0000e-04\n",
      "Epoch 171/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8686 - lr: 1.0000e-04\n",
      "Epoch 172/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8848 - lr: 1.0000e-04\n",
      "Epoch 173/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8822 - lr: 1.0000e-04\n",
      "Epoch 174/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8706 - lr: 1.0000e-04\n",
      "Epoch 175/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8724 - lr: 1.0000e-04\n",
      "Epoch 176/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8734 - lr: 1.0000e-04\n",
      "Epoch 177/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8786 - lr: 1.0000e-04\n",
      "Epoch 178/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8769 - lr: 1.0000e-04\n",
      "Epoch 179/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8798 - lr: 1.0000e-04\n",
      "Epoch 180/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8953 - lr: 1.0000e-04\n",
      "Epoch 181/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8724 - lr: 1.0000e-04\n",
      "Epoch 182/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8718 - lr: 1.0000e-04\n",
      "Epoch 183/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8713 - lr: 1.0000e-04\n",
      "Epoch 184/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8723 - lr: 1.0000e-04\n",
      "Epoch 185/200\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8782 - lr: 1.0000e-04\n",
      "Epoch 186/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8741 - lr: 1.0000e-04\n",
      "Epoch 187/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8710 - lr: 1.0000e-04\n",
      "Epoch 188/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8741 - lr: 1.0000e-04\n",
      "Epoch 189/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8710 - lr: 1.0000e-04\n",
      "Epoch 190/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8703 - lr: 1.0000e-04\n",
      "Epoch 191/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8969 - lr: 1.0000e-04\n",
      "Epoch 192/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9022 - lr: 1.0000e-04\n",
      "Epoch 193/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8865 - lr: 1.0000e-04\n",
      "Epoch 194/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8804 - lr: 1.0000e-04\n",
      "Epoch 195/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8731 - lr: 1.0000e-04\n",
      "Epoch 196/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8714 - lr: 1.0000e-04\n",
      "Epoch 197/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8720 - lr: 1.0000e-04\n",
      "Epoch 198/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8726 - lr: 1.0000e-04\n",
      "Epoch 199/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8816 - lr: 1.0000e-04\n",
      "Epoch 200/200\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8862 - lr: 1.0000e-04\n"
     ]
    }
   ],
   "source": [
    "r = model.fit(X, Y, epochs=200, callbacks=[scheduler])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hA8AsnUmiQ4Y"
   },
   "source": [
    "# Plotting the loss for iteration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "id": "x3m_Ja8iiTTc",
    "outputId": "27edfc0c-a36a-4836-e528-4dcc4825cc07"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f6ea90e1d60>]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(r.history['loss'], label='loss')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CR1XrqtxjJ7I"
   },
   "source": [
    "# Getting the slope of the line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bDPP5sUQjMcT",
    "outputId": "7beabd4c-3eb5-4c2a-b840-dc2e873c4134"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<keras.layers.core.dense.Dense object at 0x7f6eacfa5160>]\n",
      "[array([[0.35020947]], dtype=float32), array([17.77522], dtype=float32)]\n"
     ]
    }
   ],
   "source": [
    "# Note: Input layer won't count, it would act like a dummy layer\n",
    "print(model.layers)\n",
    "print(model.layers[0].get_weights())\n",
    "# first array represents w, second array represents b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "thpjKY5FToG8"
   },
   "source": [
    "# Part 2: Making Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 751
    },
    "id": "z9uuidBZTrr_",
    "outputId": "0535c60d-9215-4149-9d5c-2e3a39bfaee8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 0s 2ms/step\n",
      "[ 6.7684116  7.12148    7.4745483  7.4745483  7.8276167  7.8276167\n",
      "  7.8276167  8.180685   8.533752   8.533752   8.533752   9.239889\n",
      "  9.239889   9.5929575  9.5929575  9.5929575 10.299093  10.652163\n",
      " 10.652163  11.00523   11.358298  11.358298  11.711367  11.711367\n",
      " 11.711367  12.064435  12.064435  12.064435  12.417503  12.417503\n",
      " 12.417503  12.417503  12.770571  12.770571  13.12364   13.12364\n",
      " 13.12364   13.12364   13.476707  13.829776  13.829776  14.182844\n",
      " 14.182844  14.5359125 14.5359125 14.888981  14.888981  15.242048\n",
      " 16.654322  15.242048  15.595117  15.948185  15.948185  15.948185\n",
      " 16.301254  16.654322  16.654322  17.00739   17.00739   16.654322\n",
      " 16.654322  16.654322  17.00739   17.360458  17.360458  17.713526\n",
      " 18.419662  18.419662  18.77273   19.1258    18.77273   19.1258\n",
      " 19.478867  19.831936  18.066595  18.066595  17.713526  18.77273\n",
      " 18.77273   19.1258    19.478867  18.066595  19.831936  20.185003\n",
      " 20.89114   21.244207  19.478867  19.478867  19.831936  18.419662\n",
      " 19.478867  19.831936  19.831936  19.478867  20.185003  20.538073\n",
      " 21.244207  21.597277  20.89114   20.538073  20.538073  21.244207\n",
      " 21.244207  20.538073  21.244207  21.950344  19.1258    22.303413\n",
      " 21.597277  22.303413  19.831936  20.538073  21.950344  22.303413\n",
      " 22.303413  21.244207  20.89114   20.538073  21.950344  20.89114\n",
      " 21.244207  21.950344  22.65648   23.009548  23.009548  23.362617\n",
      " 21.244207  22.65648   22.65648   22.303413  21.597277  23.009548\n",
      " 21.950344  23.009548  23.009548  23.009548  21.244207  21.597277\n",
      " 21.950344  23.009548  23.362617  22.65648   23.362617  23.009548\n",
      " 23.362617  23.009548  22.303413  23.009548  22.65648   23.009548\n",
      " 22.65648   23.009548  23.009548  22.303413  23.009548  23.362617\n",
      " 23.009548  23.009548  23.009548  23.362617  23.362617  23.362617 ]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make sure the line fits our data\n",
    "Yhat = model.predict(X).flatten()\n",
    "plt.scatter(X, Y)\n",
    "plt.plot(X, Yhat, color='red')\n",
    "print(Yhat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5o08PZ2PUmE_"
   },
   "source": [
    "# Manual Calculation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3sRMYgywUn9a",
    "outputId": "2d16b2ea-9cf5-4457-f490-79a72a3da083"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.3530682]] [17.783268]\n",
      "[ 6.76841182  7.12148003  7.47454823  7.47454823  7.82761643  7.82761643\n",
      "  7.82761643  8.18068463  8.53375284  8.53375284  8.53375284  9.23988924\n",
      "  9.23988924  9.59295744  9.59295744  9.59295744 10.29909385 10.65216205\n",
      " 10.65216205 11.00523026 11.35829846 11.35829846 11.71136666 11.71136666\n",
      " 11.71136666 12.06443486 12.06443486 12.06443486 12.41750307 12.41750307\n",
      " 12.41750307 12.41750307 12.77057127 12.77057127 13.12363947 13.12363947\n",
      " 13.12363947 13.12363947 13.47670767 13.82977588 13.82977588 14.18284408\n",
      " 14.18284408 14.53591228 14.53591228 14.88898049 14.88898049 15.24204869\n",
      " 16.6543215  15.24204869 15.59511689 15.94818509 15.94818509 15.94818509\n",
      " 16.3012533  16.6543215  16.6543215  17.0073897  17.0073897  16.6543215\n",
      " 16.6543215  16.6543215  17.0073897  17.3604579  17.3604579  17.71352611\n",
      " 18.41966251 18.41966251 18.77273072 19.12579892 18.77273072 19.12579892\n",
      " 19.47886712 19.83193532 18.06659431 18.06659431 17.71352611 18.77273072\n",
      " 18.77273072 19.12579892 19.47886712 18.06659431 19.83193532 20.18500353\n",
      " 20.89113993 21.24420813 19.47886712 19.47886712 19.83193532 18.41966251\n",
      " 19.47886712 19.83193532 19.83193532 19.47886712 20.18500353 20.53807173\n",
      " 21.24420813 21.59727634 20.89113993 20.53807173 20.53807173 21.24420813\n",
      " 21.24420813 20.53807173 21.24420813 21.95034454 19.12579892 22.30341274\n",
      " 21.59727634 22.30341274 19.83193532 20.53807173 21.95034454 22.30341274\n",
      " 22.30341274 21.24420813 20.89113993 20.53807173 21.95034454 20.89113993\n",
      " 21.24420813 21.95034454 22.65648095 23.00954915 23.00954915 23.36261735\n",
      " 21.24420813 22.65648095 22.65648095 22.30341274 21.59727634 23.00954915\n",
      " 21.95034454 23.00954915 23.00954915 23.00954915 21.24420813 21.59727634\n",
      " 21.95034454 23.00954915 23.36261735 22.65648095 23.36261735 23.00954915\n",
      " 23.36261735 23.00954915 22.30341274 23.00954915 22.65648095 23.00954915\n",
      " 22.65648095 23.00954915 23.00954915 22.30341274 23.00954915 23.36261735\n",
      " 23.00954915 23.00954915 23.00954915 23.36261735 23.36261735 23.36261735]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the weights\n",
    "w, b = model.layers[0].get_weights()\n",
    "print(w, b)\n",
    "\n",
    "# Reshape X because we flattened it again earlier\n",
    "X = X.reshape(-1, 1)\n",
    "\n",
    "\n",
    "Yhat2 = (X.dot(w) + b).flatten()\n",
    "print(Yhat2)\n",
    "\n",
    "np.allclose(Yhat, Yhat2)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
